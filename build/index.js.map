{"version":3,"sources":["../src/index.js"],"names":["xss","require","rateLimit","hpp","db","dotenv","config","app","use","req","res","next","header","limiter","windowMs","max","bodyParser","json","urlencoded","extended","routes","status","error","process","on","log","info","exit","sequelize","sync","close","console","listen","env","PORT"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport helmet from \"helmet\";\nimport logger from \"morgan\";\nconst xss = require(\"xss-clean\");\nconst rateLimit = require(\"express-rate-limit\");\nconst hpp = require(\"hpp\");\nimport log from \"./utils/logger\";\nimport routes from \"./Routes/routes\";\n//const db = require(\"./Sequelizedbconfig/index\");\nconst db = require(\"./DBCONFIG/models/index\");\n\ndotenv.config();\n\nconst app = express();\n\napp.use(cors());\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Credentials\", true);\n  res.header(\"Access-Control-Allow-Methods\", \"GET,PUT,POST,DELETE,OPTIONS\");\n  res.header(\n    \"Access-Control-Allow-Headers\",\n    \"Origin,X-Requested-With,Content-Type,x-auth,Accept,content-type,application/json\"\n  );\n  next();\n});\n// Set security headers\napp.use(helmet());\n\n// Prevent XSS attacks\napp.use(xss());\napp.use(logger(\"dev\"));\n\n// Prevent http param pollution\napp.use(hpp());\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 10 * 60 * 1000, // 10 mins\n  max: 100,\n});\napp.use(limiter);\n\n// Parse incoming requests data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n// base api\n\napp.use(\"/api\", routes);\n\n// CATCH ALL INVALID ROUTES\napp.use(\"*\", (req, res, next) => {\n  res.status(404).json({\n    error: \"Invalid route\",\n  });\n  next();\n});\n\nprocess.on(\"uncaughtException\", () => {\n  log.info(\"WE GOT AN UNCAUGHT EXCEPTION\");\n  process.exit(0);\n});\n\nprocess.on(\"unhandledRejection\", () => {\n  log.info(\"WE GOT AN UNHANDLED REJECTION\");\n  process.exit(0);\n});\n\ndb.sequelize.sync()\n// // drop the table if it already exists\n// db.sequelize.sync({ force: true }).then(() => {\n//   console.log(\"Drop and re-sync db.\");\n//  });\n\nprocess.on(\"SIGINT\", () => {\n  db.sequelize.close(); // This close the connection to the database\n  console.log(\"Shutting down server...\");\n  console.log(\"Server successfully shutdown\");\n  process.exit(0);\n});\n\napp.listen(process.env.PORT, () => {\n  console.log(`Starting Server on port ${process.env.PORT}...`);\n});\nexport default app;\n"],"file":"index.js"}