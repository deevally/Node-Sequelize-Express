{"version":3,"sources":["../../src/Controllers/messageController.js"],"names":["asyncHandler","require","getIdParam","db","User","Message","Op","Sequelize","exports","CreateMessage","req","res","next","Messages","create","body","status","send","message","error","GetAllMessages","msg","findAll","include","model","as"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,qBAAD,CAA9B;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,0BAAD,CAAlB;;AACA,MAAMG,IAAI,GAAGD,EAAE,CAACC,IAAhB;AACA,MAAMC,OAAO,GAAGF,EAAE,CAACE,OAAnB;AACA,MAAMC,EAAE,GAAGH,EAAE,CAACI,SAAH,CAAaD,EAAxB;AAEAE,OAAO,CAACC,aAAR,GAAwBT,YAAY;AAAA,+BAAC,WAAOU,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC7D,QAAI;AAEF,YAAMC,QAAQ,SAASR,OAAO,CAACS,MAAR,CAAeJ,GAAG,CAACK,IAAnB,CAAvB;AAEA,aAAOJ,GAAG,CACPK,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,8BAAX;AAA2CL,QAAAA;AAA3C,OAFD,CAAP;AAGD,KAPD,CAOE,OAAOM,KAAP,EAAc;AACd,aAAOR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,KAAK,CAACD,OAA3B,CAAP;AACD;AACF,GAXmC;;AAAA;AAAA;AAAA;AAAA,IAApC;AAaCV,OAAO,CAACY,cAAR,GAAyBpB,YAAY;AAAA,gCAAC,WAAOU,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAC9D,QAAI;AACF,YAAMS,GAAG,SAAShB,OAAO,CAACiB,OAAR,CAAgB;AAAEC,QAAAA,OAAO,EAAG,CAAC;AAACC,UAAAA,KAAK,EAAGpB,IAAT;AAAgBqB,UAAAA,EAAE,EAAE;AAApB,SAAD;AAAZ,OAAhB,CAAlB;AACA,UAAI,CAACJ,GAAL,EAAU,OAAOV,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CAAP;AAEV,aAAON,GAAG,CACPK,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,gCAAX;AAA6CG,QAAAA;AAA7C,OAFD,CAAP;AAGD,KAPD,CAOE,OAAOF,KAAP,EAAc;AACd,aAAOR,GAAG,CACPK,MADI,CACG,GADH,EAEJC,IAFI,CAECE,KAAK,CAACD,OAAN,IAAiB,gDAFlB,CAAP;AAGD;AACF,GAboC;;AAAA;AAAA;AAAA;AAAA,IAArC","sourcesContent":["const asyncHandler = require(\"../Middlewares/async\");\nconst { getIdParam } = require(\"../utils/validateId\");\nconst db = require(\"../DBCONFIG/models/index\");\nconst User = db.User;\nconst Message = db.Message;\nconst Op = db.Sequelize.Op;\n\nexports.CreateMessage = asyncHandler(async (req, res, next) => {\n  try {\n\n    const Messages = await Message.create(req.body);\n\n    return res\n      .status(201)\n      .send({ message: \"Message created successfully\", Messages });\n  } catch (error) {\n    return res.status(500).send(error.message);\n  }\n});\n\n exports.GetAllMessages = asyncHandler(async (req, res, next) => {\n   try {\n     const msg = await Message.findAll({ include : [{model : User , as: \"author\"}]});\n     if (!msg) return res.status(404).send(\"No messages exist\");\n\n     return res\n       .status(200)\n       .send({ message: \"Successfuly retrieved messages\", msg });\n   } catch (error) {\n     return res\n       .status(500)\n       .send(error.message || \"Some error occurred while retrieving messages.\");\n   }\n });"],"file":"messageController.js"}