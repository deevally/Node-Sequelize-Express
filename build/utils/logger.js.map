{"version":3,"sources":["../../src/utils/logger.js"],"names":["dotenv","config","CONSOLE_DATE_FORMAT","createLogger","label","process","env","LOG_LABEL","level","LOG_LEVEL","filename","LOG_FILE","logger","winston","add","transports","Console","format","combine","colorize","timestamp","splat","printf","message","length","File","uncolorize","json"],"mappings":";;;;;;;AACA;;AACA;;;;AAFA;AAIAA,gBAAOC,MAAP;;AAEA,MAAMC,mBAAmB,GAAG,cAA5B;AAEA;;;;;;;;AAOA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA1B;AACA,QAAMC,KAAK,GAAGH,OAAO,CAACC,GAAR,CAAYG,SAA1B;AACA,QAAMC,QAAQ,GAAGL,OAAO,CAACC,GAAR,CAAYK,QAA7B;;AACA,QAAMC,MAAM,GAAGC,iBAAQV,YAAR,CAAqB;AAAEK,IAAAA;AAAF,GAArB,CAAf,CAJyB,CAMzB;;;AACAI,EAAAA,MAAM,CAACE,GAAP,CACE,IAAID,iBAAQE,UAAR,CAAmBC,OAAvB,CAA+B;AAC7BC,IAAAA,MAAM,EAAEJ,iBAAQI,MAAR,CAAeC,OAAf,CACNL,iBAAQI,MAAR,CAAeE,QAAf,EADM,EAENN,iBAAQI,MAAR,CAAeb,KAAf,CAAqB;AAAEA,MAAAA;AAAF,KAArB,CAFM,EAGNS,iBAAQI,MAAR,CAAeG,SAAf,CAAyB;AAAEH,MAAAA,MAAM,EAAEf;AAAV,KAAzB,CAHM,EAINW,iBAAQI,MAAR,CAAeI,KAAf,EAJM,EAKNR,iBAAQI,MAAR,CAAeK,MAAf,CACE,CAAC;AAAEd,MAAAA,KAAF;AAASe,MAAAA,OAAT;AAAkBnB,MAAAA,KAAlB;AAAyBgB,MAAAA;AAAzB,KAAD,KACG,GAAEA,SAAU,KAAIhB,KAAM,KAAII,KAAM,KAAIe,OAAQ,EAFjD,CALM;AADqB,GAA/B,CADF,EAPyB,CAsBzB;;AACA,MAAI,OAAOb,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACc,MAA7C,EAAqD;AACnDZ,IAAAA,MAAM,CAACE,GAAP,CACE,IAAID,iBAAQE,UAAR,CAAmBU,IAAvB,CAA4B;AAC1Bf,MAAAA,QAD0B;AAE1BO,MAAAA,MAAM,EAAEJ,iBAAQI,MAAR,CAAeC,OAAf,CACNL,iBAAQI,MAAR,CAAeb,KAAf,CAAqB;AAAEA,QAAAA;AAAF,OAArB,CADM,EAENS,iBAAQI,MAAR,CAAeG,SAAf,EAFM,EAGNP,iBAAQI,MAAR,CAAeI,KAAf,EAHM,EAINR,iBAAQI,MAAR,CAAeS,UAAf,EAJM,EAKNb,iBAAQI,MAAR,CAAeU,IAAf,EALM;AAFkB,KAA5B,CADF;AAYD;;AAED,SAAOf,MAAP;AACD,CAvCD;;AAyCA,MAAMA,MAAM,GAAGT,YAAY,EAA3B;eACeS,M","sourcesContent":["/* eslint-disable no-shadow */\nimport winston from \"winston\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst CONSOLE_DATE_FORMAT = \"HH:mm:ss.SSS\";\n\n/**\n * Factory method to create a logger with the parameters provided\n * @param {string} label Log label\n * @param {string} level Log level e.g info, debug, warn\n * @param {string} filename Filename to write logs\n * @returns {winston.Logger} Logger\n */\nconst createLogger = () => {\n  const label = process.env.LOG_LABEL;\n  const level = process.env.LOG_LEVEL;\n  const filename = process.env.LOG_FILE;\n  const logger = winston.createLogger({ level });\n\n  // Console transport for display messages in the terminal\n  logger.add(\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.label({ label }),\n        winston.format.timestamp({ format: CONSOLE_DATE_FORMAT }),\n        winston.format.splat(),\n        winston.format.printf(\n          ({ level, message, label, timestamp }) =>\n            `${timestamp} [${label}] ${level}: ${message}`\n        )\n      ),\n    })\n  );\n\n  // If a filename is specified, create a file logger\n  if (typeof filename === \"string\" && filename.length) {\n    logger.add(\n      new winston.transports.File({\n        filename,\n        format: winston.format.combine(\n          winston.format.label({ label }),\n          winston.format.timestamp(),\n          winston.format.splat(),\n          winston.format.uncolorize(),\n          winston.format.json()\n        ),\n      })\n    );\n  }\n\n  return logger;\n};\n\nconst logger = createLogger();\nexport default logger;\n"],"file":"logger.js"}